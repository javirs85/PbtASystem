@using PbtASystem.Services;
@inject FirebaseData DB
@inject CharacterSelectionService Controller

<div class="PbtASystemContainer @Visible">
    @if (Controller.HeaderMessage != "")
    {
        <div class="d-flex w-100 text-center align-items-center justify-content-center p-2 px-3" style="background: #871111;">
            @Controller.HeaderMessage
        </div>
    }
	<div class="Menu d-flex w-100 BaseBlack">
        @if (Controller.AllowExit)
        {
            <div class="ExitButton" @onclick=ExitModal>
                <i class="bi bi-x-lg"></i>
            </div>
        }       
        
		<div class="d-flex flex-grow-1 d-flex justify-content-around">
            <div class="@(SelectedCircle == Circles.Mortalis?"ActiveMenuButton Mortalis":"MenuButton")"
                    @onclick="()=>{SelectedCircle = Circles.Mortalis;}">
                Mortalis
            </div>
            <div class="@(SelectedCircle == Circles.Noche?"ActiveMenuButton Night":"MenuButton")"
                 @onclick="()=>{SelectedCircle = Circles.Noche;}">
                Noche
            </div>
            <div class="@(SelectedCircle == Circles.Poder?"ActiveMenuButton Power":"MenuButton")"
                 @onclick="()=>{SelectedCircle = Circles.Poder;}">
                Poder
            </div>
            <div class="@(SelectedCircle == Circles.Velo?"ActiveMenuButton Wild":"MenuButton")"
                 @onclick="()=>{SelectedCircle = Circles.Velo;}">
                Velo
            </div>
        </div>
    </div>


	<div class="Content">
		@foreach(var Fac in DB.AllFactions.Where(x=>x.Circle == SelectedCircle && DB.GetMembersOfFaction(x).Count>0))
		{
            <div>
                <div class="FactionTittle @FromFactToClass">@Fac.Name</div>
                <div class="d-flex flex-wrap mb-5">
                    @foreach (var ch in DB.GetMembersOfFaction(Fac))
                    {
                        <div class="@(ch.IsNPC?"CharacterButton":"CharacterButton PCCharacter")" @onclick="()=>{CharacterSelected(ch);}">@ch.Name</div>
                    }
                </div>
            </div>
        }
	</div>
</div>

@code {
    TaskCompletionSource<Character> tcs;

    protected override void OnAfterRender(bool firstRender)
    {
        Controller.UI_ForceUpdate -= ForeceUpdate;
        Controller.UI_ForceUpdate += ForeceUpdate;
        Controller.UI_Show += (o, e) =>
        {
            IsVisible = true;
            StateHasChanged();
        };
        Controller.UI_Hide += (o, e) =>
        {
            IsVisible = false;
            StateHasChanged();
        };
    }

    private string FromFactToClass
    {
        get
        {
            return SelectedCircle switch
            {
                Circles.Mortalis => "MortalisBorder",
                Circles.Noche => "NightBorder",
                Circles.Poder => "PowerBorder",
                Circles.Velo => "WildBorder",
                _ => "Night",
            };
        }
    }

    bool IsVisible = false;
    string Visible
    {
        get
        {
            if (IsVisible) return "Visible";
            else return "Hidden";
        }
    }

    private void CharacterSelected(Character ch)
    {
        Controller.Selected(ch);
    }

    private void ExitModal() => Controller.CancelSelection();
    private Circles SelectedCircle = Circles.Mortalis;
    private void ForeceUpdate(object? sender, EventArgs args) => StateHasChanged();

}
