@page "/Character/{IDString}"
@inject IToastService Toaster;
@inject FirebaseData Data;
@inject FirebaseAuth Auth;
@inject FirebaseMessaging Msgs;
@inject HttpClient Http
@inject ConfirmationModalService Confirm;
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="d-flex flex-column w-100"> 
	<div class="PbtASystemContainer container-fluid">
		<div class="row">
			<div class="d-none d-md-block col-4 col-xl-3">
				<CharacterFactionSelector />
			</div>

			<div class="flex-grow-1 col">
				<div class="d-flex flex-column">
					<div class="container-fluid">
						<div class="row">
							<div class="col-12 col-sm-6 col-xl-4  col-xxl-3 d-flex flex-column" style="padding:0">
								<div class="ImageCanvas" style="@(Data.CurrentCharacter.IsDead?"filter: contrast(0.5) brightness(1.5) grayscale(1) sepia(1) hue-rotate(311deg) brightness(0.5) saturate(2.5);":"")">
									<img src="@Image64"/>
									<div class="UpperButtons d-flex w-100 justify-content-between flex-row-reverse">
										<div class="d-flex gap-2">
											<div class="ImageButton" @onclick=Edit >
												<i class="bi bi-pencil Edit" />
											</div>
										</div>
										<div class="d-block d-md-none">
											<div class="ImageButton" @onclick=@(()=>{Navigation.NavigateTo("/Select");})>
												<i class="bi bi-arrow-left BackButton"  />
											</div>
										</div>
									</div>
									<div class="NameDiv">
										@Data.CurrentCharacter.Name
									</div>
								</div>

								<div class="d-flex flex-column gap-2 d-none d-sm-block">
									<div class="CharacterEntryLine">@CharFactionString</div>
									<div class="CharacterEntryLine">@Data.CurrentCharacter.Tick</div>
									<div class="d-flex flex-column gap-4 mt-4">
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Detalles</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.Details</div>
										</div>
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Objetivo final</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.FinalGoal</div>
										</div>
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Actualmente...</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.CurrentGoal</div>
										</div>
										<div class="MasterSeeds">
											<div class="CharacterEntryHeader">Master seeds</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.MasterSeeds</div>
										</div>
									</div>
								</div>
							</div>
							<div class="col col-sm-6 col-xl-8 col-xxl-9 mt-4">
								<div class="d-flex gap-2">
									<div>Deudas a pagar</div>
									<i class="bi bi-plus-square AddDebtButton" @onclick=@(async()=>{await AddNewDeb(DebtViewer.PayingMode.ToPay);}) />
								</div>
								<div class="DebtsColmnsPhone d-flex d-sm-none p-2 d-flex flex-column gap-1">
									@foreach (var d in Data.AllDebts.Where(x => x.PayingID == Data.CurrentCharacter.ID))
									{
										<DebtViewer Debt="d" ForceUpdateUI="StateHasChanged" />
									}
								</div>
								<div class="DebtsColmns d-none d-sm-flex p-2 d-flex flex-column gap-1">
									@foreach (var d in Data.AllDebts.Where(x => x.PayingID == Data.CurrentCharacter.ID))
									{
										<DebtViewer Debt="d" ForceUpdateUI="StateHasChanged" />
									}
								</div>
								<div class="d-flex gap-2 pt-3">
									<div>Deudas a cobrar</div>
									<i class="bi bi-plus-square AddDebtButton" @onclick=@(async()=>{await AddNewDeb(DebtViewer.PayingMode.ToBePaid);}) />
								</div>
								<div class="DebtsColmnsPhone d-block d-sm-none p-2 d-flex flex-column gap-1">
									@foreach (var d in Data.AllDebts.Where(x => x.ReceivingID == Data.CurrentCharacter.ID))
									{
										<DebtViewer Debt="d" Mode="DebtViewer.PayingMode.ToBePaid" ForceUpdateUI="StateHasChanged" />
									}
								</div>
								<div class="DebtsColmns d-none d-sm-block  p-2 d-flex flex-column gap-1">
									@foreach (var d in Data.AllDebts.Where(x => x.ReceivingID == Data.CurrentCharacter.ID))
									{
										<DebtViewer Debt="d" Mode="DebtViewer.PayingMode.ToBePaid" ForceUpdateUI="StateHasChanged" />
									}
								</div>
								<div class="d-flex flex-column gap-2 d-block d-sm-none">
									<div class="CharacterEntryLine">@Data.CurrentCharacter.Name (@Data.CurrentCharacter.Kind)</div>
									<div class="CharacterEntryLine">@CharFactionString</div>
									<div class="CharacterEntryLine">@Data.CurrentCharacter.Tick</div>
									<div class="d-flex flex-column gap-4 mt-4">
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Detalles</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.Details</div>
										</div>
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Objetivo final</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.FinalGoal</div>
										</div>
										<div class="CharacterEntryBox">
											<div class="CharacterEntryHeader">Actualmente...</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.CurrentGoal</div>
										</div>
										<div class="MasterSeeds">
											<div class="CharacterEntryHeader">Master seeds</div>
											<div class="CharacterEntryBody">@Data.CurrentCharacter.MasterSeeds</div>
										</div>
									</div>
								</div>
							</div>
						</div>
						
					</div>
				</div>

			</div>
		</div>
	</div>
</div>


@code {
	[Parameter] public string IDString { get; set; } = "";
	string Image64 = "";
	string CharFactionString = "";

	private void Edit()
	{
		Navigation.NavigateTo($"/EditCharacter/{Data.CurrentCharacter.ID}");
	}

	private async Task Delete()	
	{
		var Confirmed = await Confirm.AskUserForConfirmation("Deseas borrar a " + Data.CurrentCharacter.Name + " de la base de datos", $"Borrar a {Data.CurrentCharacter.Name}", $"Borrar a {Data.CurrentCharacter.Name}");
		if (Confirmed)
		{
			var friend = await Data.DeleteCharacter(Data.CurrentCharacter);
			Navigation.NavigateTo($"/Character/{friend.ID}");
		}
	}

	protected async override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			if (await Data.CheckIfNeedToLoad()) StateHasChanged();
			await Msgs.CheckIfReConnnectionNeeded();


			if (Auth.ConnectedUserName == Data.Chronicle.MasterPlayerID)
				Auth.IsMaster = true;
		}
	}

	protected async override void OnParametersSet()
	{
		await Connectors.SetConnectors(JS, Data, Auth);

		Guid ID = new Guid(IDString);
		Data.CurrentCharacter = Data.GetCharacterByID(ID);
		CharFactionString = Data.GetFaction(Data.CurrentCharacter.FactionID)?.Name ?? "autonomo";

		Image64 = await Data.getImageBase64Async();

		StateHasChanged();
	}

	private async Task AddNewDeb(DebtViewer.PayingMode mode)
	{
		Debt d = new Debt();
		if (mode == DebtViewer.PayingMode.ToPay)
			d.PayingID = Data.CurrentCharacter.ID;
		else
			d.ReceivingID = Data.CurrentCharacter.ID;


		d.Amount = 1;
		d.Reason = "Escriba aquí el motivo";

		await Data.StoreDebt(d);
	}

}
