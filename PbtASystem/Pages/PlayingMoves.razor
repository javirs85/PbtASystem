@using static PbtASystem.Pages.Playing;
@inject FirebaseData Data
@inject FirebaseAuth Auth
@inject FirebaseMessaging Messaging
@inject USMovesService Moves
@inject IToastService Toaster

<div class="PbtASystemContainer Black">

	<div class="w-100 d-flex Darker TopMenu">
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Basic?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Basic))>Básicos</div>
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Cricle?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Cricle))>Círculo</div>
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Book?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Book))>Libro</div>
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Corruption?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Corruption))>Corrup</div>
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Debt?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Debt))>Deuda</div>
		<div class="TopMenuButton @(CurrentlyShowing == Sections.Drama?"TopMenuButtonActive":"")" @onclick=@(_ => SectionSelected(Sections.Drama))>Drama</div>
	</div>
	<div class="MovesArea d-flex flex-column gap-2 p-2 Darker mb-2">

		@if (CurrentlyShowing == Sections.Book)
		{
			<div>Movimientos seleccionados</div>
			@foreach (var Mov in MovesOnScreen)
			{
				<MoveViewer ID="Mov.ID" IsSelected=IsThisMoveSelected(Mov) Clicked=@(_ => Select(Mov)) ForceUpdate="Update" />
			}
			<div>@Data.CurrentPlayerSheet.Archetype.ToUI()</div>
			@foreach (var Mov in UniqueMovesOnScreen)
			{
				<MoveViewer ID="Mov.ID" IsSelected=IsThisMoveSelected(Mov) Clicked=@(_ => Select(Mov)) ForceUpdate="Update" />
			}
		}
		else
		{
			@foreach (var Mov in MovesOnScreen)
			{
				<MoveViewer ID="Mov.ID" IsSelected=IsThisMoveSelected(Mov) Clicked=@(_ => Select(Mov)) ForceUpdate="Update" />
			}
		}
	</div>
	@if (CurrentlyShowing == Sections.Book)
	{
		<div class="w-100 d-flex justify-content-center p-1 px-3">
			<button class="btn btn-outline-light RoundButton" @onclick=OpenMovesSelectorForBooks>Cambiar movimientos de Libreto</button>
		</div>
	}
	@if (CurrentlyShowing == Sections.Corruption)
	{
		<div class="w-100 d-flex justify-content-center p-1 px-3">
			<button class="btn btn-outline-light align-items-center RoundButton" @onclick=OpenMovesSelectorForCorruption>Cambiar movimientos de corrupción</button>
		</div>
	}
	@if (CurrentlyShowing == Sections.Debt)
	{
		<div class="ms-1 opacity-75">Deudas a pagar</div>
		@foreach (var debt in Data.AllDebts.Where(x => x.PayingID == Data.CurrentCharacter.ID))
		{
			<div class="ms-3">@debt.Amount a @Data.GetCharacterByID(debt.ReceivingID).Name</div>
		}
		<div class="ms-1 opacity-75">Deudas a cobrar</div>
		@foreach (var debt in Data.AllDebts.Where(x => x.ReceivingID == Data.CurrentCharacter.ID))
		{
			<div class="ms-3">@debt.Amount de @Data.GetCharacterByID(debt.PayingID).Name</div>
		}
		<div class="w-100 d-flex justify-content-center p-1 px-3 mt-2">
			<button class="btn btn-outline-light align-items-center RoundButton" @onclick=GoToCampaign>Gestionar deudas</button>
		</div>
	}
	


	<!--Modal for selecting moves to add-->
	<div class="FullScreenModal ModalTop d-flex flex-column @(IsShowingMoveSelector?"":"HideModal")" @onclick=CloseMovesSelector>
		<div class="CloseButton">
			<img src="imgs/Icons/Close.svg" style="cursor: pointer;" />
		</div>
		<div class="ModalBody">
			<div class="accordion accordion-flush w-100 DarkAccordion" @onclick:stopPropagation=true id="accordionFlushExample">
				@foreach (var pack in MovesToChooseFrom)
				{
					<div class="accordion-item w-100 accordionMovement DarkAccordionItem @(pack == SelectedPack?"":"DarkAccordionNotSelected")">
						<h2 class="accordion-header w-100 DarkAccordionHeader" id="flush-headingOne">
							<div data-bs-toggle="collapse"
			   data-bs-target="#flush-collapseOne-@pack.Tittle.Replace(' ', '_')"
							 @onclick=@(_ =>{SelectedPack = pack;})>
								@pack.Tittle
							</div>

						</h2>
						<div id="flush-collapseOne-@pack.Tittle.Replace(' ', '_')" class="accordion-collapse collapse @(pack.Moves[0].Archetipe == Data.CurrentPlayerSheet.Archetype?"show":"") DarkAccordionBody" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
							<div class="Darker d-flex flex-column flex-column gap-2">
								@foreach (var mov in pack.Moves)
								{
									<MoveViewer ID="mov.ID"
										IsSelected=IsThisMoveSelected(mov)
										IsSelectionMode=true
										Clicked=@(_ => Select(mov))
										SelectedInSelectionMode="@(async _ =>{await ToggleMove(mov);})" />
								}
							</div>
						</div>
					</div>
				}
				<div class="accordion-item w-100 accordionMovement DarkAccordionItem @(MageMagic == SelectedPack?"":"DarkAccordionNotSelected")">
					<h2 class="accordion-header w-100 DarkAccordionHeader" id="flush-headingOne">
						<div data-bs-toggle="collapse"
		   data-bs-target="#flush-collapseOne-@MageMagic.Tittle.Replace(' ', '_')"
							 @onclick=@(_ =>{SelectedPack = MageMagic;})>
							@MageMagic.Tittle
						</div>

					</h2>
					<div id="flush-collapseOne-@MageMagic.Tittle.Replace(' ', '_')" class="accordion-collapse collapse @(MageMagic.Moves[0].Archetipe == Data.CurrentPlayerSheet.Archetype?"show":"") DarkAccordionBody" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
						<div class="Darker d-flex flex-column flex-column gap-2">
							@foreach (var mov in MageMagic.Moves)
							{
								<MoveViewer ID="mov.ID"
										IsSelected=IsThisMoveSelected(mov)
										IsSelectionMode=true
										Clicked=@(_ => Select(mov))
										SelectedInSelectionMode="@(async _ =>{await ToggleMove(mov);})" />
							}
						</div>
					</div>
				</div>
				<div class="accordion-item w-100 accordionMovement DarkAccordionItem @(FaeMagic == SelectedPack?"":"DarkAccordionNotSelected")">
					<h2 class="accordion-header w-100 DarkAccordionHeader" id="flush-headingOne">
						<div data-bs-toggle="collapse"
		   data-bs-target="#flush-collapseOne-@FaeMagic.Tittle.Replace(' ', '_')"
							 @onclick=@(_ =>{SelectedPack = FaeMagic;})>
							@FaeMagic.Tittle
						</div>

					</h2>
					<div id="flush-collapseOne-@FaeMagic.Tittle.Replace(' ', '_')" class="accordion-collapse collapse @(FaeMagic.Moves[0].Archetipe == Data.CurrentPlayerSheet.Archetype?"show":"") DarkAccordionBody" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
						<div class="Darker d-flex flex-column flex-column gap-2">
							@foreach (var mov in FaeMagic.Moves)
							{
								<MoveViewer ID="mov.ID"
										IsSelected=IsThisMoveSelected(mov)
										IsSelectionMode=true
										Clicked=@(_ => Select(mov))
										SelectedInSelectionMode="@(async _ =>{await ToggleMove(mov);})" />
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	USMove? SelectedMovement = null;
	private List<USMove> MovesOnScreen = new();
	private List<USMove> UniqueMovesOnScreen = new();
	private List<Debt> DebtsToPay = new();
	private List<Debt> DebtsToBePaid = new();

	USMove LIO;

	[Parameter] public EventCallback GoToCampaign { get; set; }


	public class MovesPack
	{
		public string Tittle;
		public List<USMove> Moves;
	}

	


	MovesPack FaeMagic = new();
	MovesPack MageMagic = new();
	private enum Sections { Basic, Cricle, Book, Corruption, Debt, Drama };
	private Sections CurrentlyShowing = Sections.Basic;

	private bool IsSheetReady = false;
	private async Task Update() => await SectionSelected(Sections.Basic);

	protected async override void OnParametersSet()
	{
		MageMagic.Moves = Moves.AllMovements.Where(mov => mov.TypeOfMovement == USMove.MovementTypes.MageMagic).ToList();
		MageMagic.Tittle = "Magia de magos";
		FaeMagic.Moves = Moves.AllMovements.Where(mov => mov.TypeOfMovement == USMove.MovementTypes.FaeMagic).ToList();
		FaeMagic.Tittle = "Magia de Hadas";

		await SectionSelected(Sections.Basic);

		StateHasChanged();
	}

	private bool IsShowingMoveSelector = false;
	
	private List<MovesPack> MovesToChooseFrom = new();
	private MovesPack SelectedPack = new();


	private async Task SectionSelected(Sections section)
	{
		CurrentlyShowing = section;
		MovesOnScreen.Clear();
		UniqueMovesOnScreen.Clear();
		if (section == Sections.Basic)
		{
			MovesOnScreen = Moves.AllMovements.Where(
				x =>
				x.TypeOfMovement == USMove.MovementTypes.BasicMovements
			).ToList();
			var lio = (USMove)Moves.GetMovement(USMoveIDs.B_LiberarPoder, Data.CurrentPlayerSheet.Archetype);
			lio.PreCondition.Options = new List<string>();

			if (Data.CurrentPlayerSheet.LIOs is null || Data.CurrentPlayerSheet.LIOs.Count == 0)
			{
				Data.CurrentPlayerSheet.LIOs = (from l in Moves.AllLio where l.Archetype == Data.CurrentPlayerSheet.Archetype select l.ID).ToList();
				await Data.StoreCharacterSheet();
			}

			foreach (var hab in Data.CurrentPlayerSheet.LIOs)
			{
				lio.PreCondition.Options.Add(Moves.AllLio.Find(x => x.ID == hab)?.Text ?? "");
			}


			MovesOnScreen.Add(lio);

			foreach (var upgraded in Data.CurrentPlayerSheet.UpgradedMoves)
			{
				var m = MovesOnScreen.Find(x => x.ID == upgraded);
				if (m is not null) m.IsImproved = true;
			}

		}
		else if (section == Sections.Cricle)
		{
			MovesOnScreen = Moves.AllMovements.Where(x => x.TypeOfMovement == USMove.MovementTypes.FactionMovement).ToList();
		}
		else if (section == Sections.Debt)
		{
			MovesOnScreen = Moves.AllMovements.Where(x => x.TypeOfMovement == USMove.MovementTypes.DebtMovements).ToList();
			DebtsToPay.Clear();
			DebtsToPay = Data.AllDebts.Where(x => x.PayingID == Data.CurrentCharacter.ID).ToList();
		}
		else if (section == Sections.Drama)
		{
			MovesOnScreen = Moves.AllMovements.Where(x =>
				x.TypeOfMovement == USMove.MovementTypes.DramaticMovement &&
				x.Archetipe == Data.CurrentPlayerSheet.Archetype
			).ToList();
			SelectedMovement = MovesOnScreen[0];
		}
		else if (section == Sections.Book)
		{
			MovesOnScreen.Clear();
			foreach (var m in Data.CurrentPlayerSheet.SelectedArchetypeMoves)
			{
				MovesOnScreen.Add((USMove)Moves.GetMovement(m));
			}

			foreach (var m in from mov in Moves.AllMovements
									where
								mov.TypeOfMovement == USMove.MovementTypes.UniqueMove &&
								mov.Archetipe == Data.CurrentPlayerSheet.Archetype
									select mov.ID)
			{
				UniqueMovesOnScreen.Add((USMove)Moves.GetMovement(m));
			}
		}
		else if (section == Sections.Corruption)
		{
			MovesOnScreen.Clear();
			foreach (var m in Data.CurrentPlayerSheet.SelectedCorruptionMoves)
			{
				MovesOnScreen.Add((USMove)Moves.GetMovement(m));
			}
		}
	}

	private void Select(USMove mov)
	{
		if (mov == SelectedMovement)
			SelectedMovement = null;
		else
			SelectedMovement = mov;
	}

	

	private bool IsThisMoveSelected(USMove mov) => SelectedMovement == mov;

	private async Task ToggleMove(USMove mov)
	{
		var sheet = Data.CurrentPlayerSheet;
		
		if (mov.TypeOfMovement == USMove.MovementTypes.ArchetipeMovement ||
			mov.TypeOfMovement == USMove.MovementTypes.FaeMagic ||
			mov.TypeOfMovement == USMove.MovementTypes.MageMagic)
		{
			if (sheet.SelectedArchetypeMoves.Contains(mov.ID))
				sheet.SelectedArchetypeMoves.Remove(mov.ID);
			else
				sheet.SelectedArchetypeMoves.Add(mov.ID);
		}
		else if (mov.TypeOfMovement == USMove.MovementTypes.CorruptionMovement)
		{
			if (sheet.SelectedCorruptionMoves.Contains(mov.ID))
				sheet.SelectedCorruptionMoves.Remove(mov.ID);
			else
				sheet.SelectedCorruptionMoves.Add(mov.ID);
		}
		await Data.StoreCharacterSheet(Data.CurrentPlayerSheet);

		//IsShowingMoveSelector = false;
		await SectionSelected(CurrentlyShowing);
	}






	private void OpenMovesSelectorForBooks()
	{
		MovesToChooseFrom.Clear();

		MovesPack pack = new();
		pack.Tittle = Data.CurrentPlayerSheet.Archetype.ToUI();
		pack.Moves = Moves.AllMovements.Where(x => x.Archetipe == Data.CurrentPlayerSheet.Archetype && x.TypeOfMovement == USMove.MovementTypes.ArchetipeMovement).ToList();
		MovesToChooseFrom.Add(pack);
		SelectedPack = pack;

		foreach (var arc in Enum.GetValues(typeof(AvailableArchetypes)).Cast<AvailableArchetypes>())
		{
			if (arc != AvailableArchetypes.All && arc != AvailableArchetypes.NotSet && arc != Data.CurrentPlayerSheet.Archetype)
			{
				var debug = arc.ToUI();
				MovesToChooseFrom.Add(new MovesPack
					{
						Tittle = arc.ToUI(),
						Moves = Moves.AllMovements.Where(x => x.TypeOfMovement == USMove.MovementTypes.ArchetipeMovement && x.Archetipe == arc).ToList()
					});
			}
		}

		IsShowingMoveSelector = true;
	}



	private void OpenMovesSelectorForCorruption()
	{
		MovesToChooseFrom.Clear();

		MovesPack pack = new();
		pack.Tittle = Data.CurrentPlayerSheet.Archetype.ToUI();
		pack.Moves = Moves.AllMovements.Where(x => x.Archetipe == Data.CurrentPlayerSheet.Archetype && x.TypeOfMovement == USMove.MovementTypes.CorruptionMovement).ToList();
		MovesToChooseFrom.Add(pack);
		SelectedPack = pack;

		foreach (var arc in Enum.GetValues(typeof(AvailableArchetypes)).Cast<AvailableArchetypes>())
		{
			if (arc != AvailableArchetypes.All && arc != AvailableArchetypes.NotSet && arc != Data.CurrentPlayerSheet.Archetype)
			{
				var debug = arc.ToUI();
				MovesToChooseFrom.Add(new MovesPack
					{
						Tittle = arc.ToUI(),
						Moves = Moves.AllMovements.Where(x =>
							x.TypeOfMovement == USMove.MovementTypes.CorruptionMovement &&
							x.Archetipe == arc).ToList()
					});
			}
		}

		IsShowingMoveSelector = true;
	}

	private void CloseMovesSelector()
	{
		IsShowingMoveSelector = false;
	}

}
