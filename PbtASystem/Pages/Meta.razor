@using System.ComponentModel.DataAnnotations;
@inject FirebaseData Data
@inject FirebaseAuth Auth
@inject FirebaseMessaging Messaging
@inject USMovesService Moves

@if(Auth.IsUserConnected && Data.IsCharacterSheetReady)
{
	<div class="d-flex flex-column w-100 p-4">
		<div><span class="opacity-75">Cronica:</span> @Data.Chronicle.Name</div>
		<div><span class="opacity-75">Personajes:</span> @Data.AllCharacters.Count</div>
		<div><span class="opacity-75">Antiguedad:</span> @Data.LocalDataAgeInDays dias</div>
		<div><span class="opacity-75">Personaje:</span> @Data.PlayerCharacter.Name</div>
		<div><span class="opacity-75">Usuario:</span> @Auth.ConnectedUserName</div>
		<div class="ButtonsPack w-100 d-flex flex-column justify-content-center gap-1 mt-4">
			<div class="btn btn-primary" @onclick=Data.ForceDataRefresh>Force Update</div>
			<div class="btn btn-primary" @onclick=Data.ClearDefaultCharacter>Forget default character</div>
			<div class="btn btn-primary" @onclick=Auth.TryLogout>LogOut</div>
			<div class="btn btn-primary" @onclick=TestMessage>TestMessg</div>
			<div class="btn btn-primary" @onclick=AllowPlayerToChooseCharacter>Change player</div>
		</div>
	</div>
}
else if (!Data.IsCharacterSheetReady)
{
	<div class="d-flex flex-column align-items-center">

		@if (Data.CurrentPlayerSheet is not null && 
			 Data.CurrentPlayerSheet.Archetype != AvailableArchetypes.NotSet && 
			 Data.CurrentPlayerSheet.Archetype != AvailableArchetypes.All)
		{
			<button @onclick=CreateSheet class="btn btn-primary w-75 p-2 d-flex align-items-center">
				<div class="d-flex flex-coxlumn align-content-center">
					<div>Crear Ficha de personaje para</div>
					<div> @Data.PlayerCharacter.Name (@Data.CurrentPlayerSheet.Archetype.ToUI()) </div>
					<div>controlada por @Auth.ConnectedUserName</div>
				</div>
			</button>
		}
		else
		{
			<EditForm Model="Data.PlayerCharacter">
				<label for="body">El personaje @Data.PlayerCharacter.Name no tiene ficha asociada. Elige un arquetipo para la ficha:</label>
				<InputSelect @bind-Value=Data.CurrentPlayerSheet.Archetype>
					@foreach (var arc in Enum.GetValues(typeof(AvailableArchetypes)))
					{
						@if ((AvailableArchetypes)arc != AvailableArchetypes.All && (AvailableArchetypes)arc != AvailableArchetypes.NotSet)
						{
							<option value="@arc">
								@(
							((AvailableArchetypes)arc).ToUI()
							)
							</option>
						}
					}
				</InputSelect>
			</EditForm>
		}
	</div>
}
else
{
	<div class="d-flex flex-column w-100 p-4">
		<div>Personajes cargados: @Data?.AllCharacters?.Count</div>
		<div>Antiguedad de los datos locales: @Data?.LocalDataAgeInDays? dias</div>
		<div>Personaje: @Data?.PlayerCharacter?.Name</div>
		<div>Usuario: @Auth?.ConnectedUserName</div>
		<div class="ButtonsPack w-100 d-flex flex-column justify-content-center gap-1 mt-4">
			<div class="btn btn-primary" @onclick=Auth.TryLogin>Login via gmail</div>
			<div class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick=@(()=>{CurrentMode = Mode.createLogin;})>Create new user password</div>
			<div class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick=@(()=>{CurrentMode = Mode.DoLogin;})>Login with user password</div>
			<div class="btn btn-primary" @onclick=ForgetDefaultCharacter>Forget default character</div>
			@if (isDefaultIDSet)
			{
				<div class="btn btn-primary" @onclick=Auth.LoginWithoutLogin>Start without login</div>
			}
			else
			{
				<div class="btn btn-primary" @onclick=AllowPlayerToChooseCharacter>Choose character</div>
			}
		</div>
	</div>

	<!--   Modal for user name paswd login -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-body">
					
					<EditForm Model="Model">
						<!-- Email input -->
						<div class="d-flex flex-column mb-3">
							<label class="text-secondary" for="form2Example1">Email address</label>
							<InputText id="form2Example1" placeholder="mail@mail.com" type="mail" @bind-Value=Model.Mail />
						</div>

						<!-- Password input -->
						<div class="d-flex flex-column">
							<label class="text-secondary" for="form2Example2">Password</label>
							<InputText type="password" placeholder="pass" @bind-Value=Model.Pass />
						</div>
					</EditForm>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick=ConfirmModal>Save changes</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	enum Mode {createLogin, DoLogin};
	Mode CurrentMode = Mode.createLogin;
	bool NeedToCreateSheet = false;

	private class LoginModel
	{
		[Required]
		[StringLength(10, ErrorMessage = "El nombre es demasiado largo")]
		public string Mail = "";

		[Required]
		[StringLength(10,MinimumLength =4, ErrorMessage = "El nombre es demasiado largo")]
		public string Pass = "";	
	}
	LoginModel Model = new();

	private async Task ConfirmModal()
	{
		if (CurrentMode == Mode.createLogin)
			await Auth.CreateUserPass(Model.Mail, Model.Pass);
		else
			await Auth.LoginUserPass(Model.Mail, Model.Pass);
	}

	protected async Task ForgetDefaultCharacter()
	{
		await Data.ClearDefaultCharacter();
		StateHasChanged();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(firstRender)
		{
			Auth.UserChanged -= Update;
			Auth.UserChanged += Update;
		}		
	}
	private void Update(object? sender, string s) => StateHasChanged();
	private void Update(object? sender, Character s) => StateHasChanged();

	bool isDefaultIDSet = false;

	private async Task TestMessage()
	{
		await Messaging.SendTestMessage();
	}


	private async Task AllowPlayerToChooseCharacter()
	{
		await Auth.AllowPlayerToChooseCharacter();

		await Data.StoreMapPlayerCharacter(Auth.ConnectedUserName, Data.PlayerCharacter.ID);


		Data.CurrentCharacter = Data.PlayerCharacter;
		if(Data.CurrentCharacter.SheetID is not null)
		{
			Data.CurrentPlayerSheet = await Data.GetCharacterSheetByID((Guid)Data.CurrentCharacter.SheetID);
		}
		else
		{
			Data.CurrentPlayerSheet = new CharacterSheet
				{
					Archetype = AvailableArchetypes.NotSet,
					ID = new Guid()
				};
			NeedToCreateSheet = true;
		}

		StateHasChanged();
	}

	private async Task CreateSheet()
	{
		Data.CurrentPlayerSheet.SelectedArchetypeMoves = Moves.GetInitialMovesIDsByArchetype(Data.CurrentPlayerSheet.Archetype);
		Data.CurrentPlayerSheet.LIOs = (from lio in Moves.AllLio where lio.Archetype == Data.CurrentPlayerSheet.Archetype select lio.ID).ToList();
		Data.CurrentPlayerSheet.ID = Guid.NewGuid();
		await Data.StoreCharacterSheet(Data.CurrentPlayerSheet);
		Data.CurrentCharacter.SheetID = Data.CurrentPlayerSheet.ID;
		await Data.StoreCharacter(Data.CurrentCharacter);
		await Data.ForceDataRefresh();
		NeedToCreateSheet = false;
		StateHasChanged();
	}
}
