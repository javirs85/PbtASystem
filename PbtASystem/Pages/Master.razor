@page "/Master"
@inject IToastService Toaster;
@inject FirebaseData Data;
@inject FirebaseAuth Auth;
@inject FirebaseMessaging Msgs;
@inject HttpClient Http
@inject ConfirmationModalService Confirm;
@inject NavigationManager Navigation
@inject USMovesService Moves
@inject IJSRuntime JS

<div class="MasterContainer">
	
	<div class="MasterItem">
		<h1 class="headerbutton" data-bs-toggle="collapse" data-bs-target="#Pack1">Movimientos</h1>
		<div class="Pack collapse" id="Pack1" data-bs-parent="">
			<h4>Movimientos del MC</h4>
			@foreach (var mov in Movimientos.OrderBy(x=>x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used0" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used2" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}		
			<h4>Movimientos de la mortandad</h4>
			@foreach (var mov in Mortalis.OrderBy(x => x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used0" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used2" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}
			<h4>Movimientos de la Noche</h4>
			@foreach (var mov in Noche.OrderBy(x => x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used0" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used2" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}
			<h4>Movimientos del Poder</h4>
			@foreach (var mov in Poder.OrderBy(x => x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used0" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used2" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}
			<h4>Movimientos del Velo</h4>
			@foreach (var mov in Velo.OrderBy(x => x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used0" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used2" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}
		</div>
	</div>
	<div class="MasterItem">
		<h1 class="headerbutton" data-bs-toggle="collapse" data-bs-target="#Pack2">Princípios</h1>
		<div class="Pack collapse" id="Pack2" data-bs-parent="">
			@foreach (var mov in Princípios.OrderBy(x => x.Usage))
			{
				<div class="@(mov.Usage == 0 ? "Used2" : "") @(mov.Usage == 1 ? "Used1" : "") @(mov.Usage == 2 ? "Used0" : "")" @onclick="@(_ => {@mov.Use();})">@mov.Tittle</div>
			}
		</div>
	</div>
	<div class="MasterItem">
		<h1 class="headerbutton" data-bs-toggle="collapse" data-bs-target="#Pack3">Relojes</h1>
		<div class="Pack collapse" id="Pack3" data-bs-parent="">
			@foreach(var clock in Data.Chronicle.Clocks)
			{
				<ClockWidgetr Clock="clock"/>
			}
			<button class="btn btn-outline-light" @onclick=AddClock>Añadir reloj</button>
		</div>
	</div>
	<div class="MasterItem">
		<h1 class="headerbutton" data-bs-toggle="collapse" data-bs-target="#Log">Log</h1>
		<div class="Pack collapse LogCollection" id="Log" data-bs-parent="">
			@if (LastMoveMsg != null)
			{
				<div class=" LastMove p-2">
					<div class="d-flex w-100 pb-2 px-4 justify-content-between align-items-center	">
						<div class="d-flex flex-column">
							<div>@LastRollName</div>
							<div>@LastRollTxt</div>
						</div>
						<div class="RolledValue d-flex align-items-center">@LastMoveMsg.RollValue</div>
						<div class="CloseButton" @onclick=@(_ => {LastMoveMsg = null;})></div>
					</div>
			
					<MoveViewer IsSelected=true MasterView=true MasterRolledValue=@LastMoveMsg.RollValue ID=LastMove.ID />
				</div>
			}

			@foreach (var msg in Log)
			{
				<div class="LogItem">
					<div>@getLogHeader(msg)</div>
					<div>@msg.Message = @msg.RollValue</div>
					<div></div>
				</div>
			}
		</div>
	</div>
</div>
@code {

	string LastRollName => LastMoveMsg?.SenderName ?? "No hay ningúna tirada";
	string LastRollTxt => LastMoveMsg?.Message ?? "";
	int RolledValue => LastMoveMsg?.RollValue ?? 0;

	RollMessage? LastMoveMsg;
	USMove? LastMove;

	private string getLogHeader(RollMessage msg) => $"{msg.SenderName} : {Moves.GetMovement(msg.MoveID).Tittle} ({(Moves.GetMovement(msg.MoveID) as USMove).Roll.ToUI()})";


	private class MasterMovement
	{
		public string Tittle = "";
		public int Usage = 0;
		public void Use()
		{
			Usage++;
			if (Usage == 3)
				Usage = 0;
		}
	}

	List<MasterMovement> Movimientos = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Saca a relucir un conflicto, ya sea antiguo o nuevo" },
		new MasterMovement{ Tittle = "Pon en peligro a alguien" },
		new MasterMovement{ Tittle = "Haz daño (o intercámbialo)" },
		new MasterMovement{ Tittle = "Ofrece una oportunidad con un coste" },
		new MasterMovement{ Tittle = "Revela un trato hecho en ausencia de los personajes" },
		new MasterMovement{ Tittle = "Vuelve un movimiento suyo en su contra" },
		new MasterMovement{ Tittle = "Ofréceles o reclámales una Deuda" },
		new MasterMovement{ Tittle = "Moviliza recursos para cambiar las proba‐bilidades" },
		new MasterMovement{ Tittle = "Avisa a alguien del peligro que se cierne" },
		new MasterMovement{ Tittle = "Bloquea, explota o reclama un lugar poderoso" },
		new MasterMovement{ Tittle = "Di las consecuencias y pregunta" },
		new MasterMovement{ Tittle = "Activa las desventajas de sus cosas" },
		new MasterMovement{ Tittle = "Haz un movimiento de Peligro o Facción" }
	};
	List<MasterMovement> Princípios = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Muestra ampliamente la ciudad, desde los rascacielos hasta las chabolas"},
		new MasterMovement{ Tittle = "Dirígete a los personajes, no a los jugadores"},
		new MasterMovement{ Tittle = "Reúne a los personajes, aunque tengan que cruzar límites"},
		new MasterMovement{ Tittle = "Coloca a los personajes en el centro de conflictos políticos y personales"},
		new MasterMovement{ Tittle = "Oculta tus movimientos en la oscuridad"},
		new MasterMovement{ Tittle = "Ponle nombre a todo el mundo, dales motivaciones"},
		new MasterMovement{ Tittle = "Trata a todo el mundo según su posición"},
		new MasterMovement{ Tittle = "Haz muchas preguntas y construye basándote en las respuestas"},
		new MasterMovement{ Tittle = "Hazte admirador de los personajes jugadores"},
		new MasterMovement{ Tittle = "Dales a los jugadores la oportunidad de sopesar las cosas (tiempo para pensar)"},
		new MasterMovement{ Tittle = "Mancha las manos de todos los implicados"},
		new MasterMovement{ Tittle = "Ponle precio a todo, incluso a la amistad"}
	};
	List<MasterMovement> Mortalis = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Adaptarse a circunstancias cambiantes"},
		new MasterMovement{ Tittle = "Reunirse en gran número para hacer frentea una amenaza"},
		new MasterMovement{ Tittle = "Descubrir información que ponga a alguien en peligro"},
		new MasterMovement{ Tittle = "Recordarle a alguien sus obligaciones del día a día"}
	};
	List<MasterMovement> Noche = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Exhibir un agresivo despliegue de fuerza."},
		new MasterMovement{ Tittle = "Amenazar las posesiones o intereses de alguien."},
		new MasterMovement{ Tittle = "Reclamar el territorio de necios o débiles."},
		new MasterMovement{ Tittle = "Sacar el mayor partido posible de una situación difícil."}
	};
	List<MasterMovement> Poder = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Dar prioridad a las consecuencias a largo plazo."},
		new MasterMovement{ Tittle = "Augurar místicamente una Tormenta que	se avecina."},
		new MasterMovement{ Tittle = "Actuar en contra del caos o el cambio."},
		new MasterMovement{ Tittle = "Arrebatar recursos vulnerables o expuestos."}
	};
	List<MasterMovement> Velo = new List<MasterMovement>
	{
		new MasterMovement{ Tittle = "Revelar una diversidad de culturas foráneas e insólitas."},
		new MasterMovement{ Tittle = "Ofrecer poder a cambio de una promesa o prenda."},
		new MasterMovement{ Tittle = "Llevar algo de un reino a otro."},
		new MasterMovement{ Tittle = "Agravar un conflicto por razones misteriosas u oscuras."}
	};

	protected async override void OnParametersSet()
	{
		await Connectors.SetConnectors(JS, Data, Auth);
		await Msgs.CheckIfReConnnectionNeeded();

		Msgs.NewRoll -= NewRoll;
		Msgs.NewRoll += NewRoll;

		StateHasChanged();
	}

	private List<RollMessage> Log = new();

	private void NewRoll(object? sender, RollMessage msg)
	{
		LastMoveMsg = msg;
		LastMove = Moves.GetMovement(msg.MoveID) as USMove;

		Log.Add(LastMoveMsg);

		StateHasChanged();
	}

	private void AddClock()
	{
		Clock cl = new();
		Data.Chronicle.Clocks.Add(cl);
		Navigation.NavigateTo($"ClockViewer/{cl.ID}");
	}
}
