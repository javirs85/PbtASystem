@using Blazored.Toast;
@inject IToastService Toaster;
@inject FirebaseData Data;
@inject FirebaseAuth Auth;
@inject FirebaseMessaging Msgs;
@inject HttpClient Http
@inject ConfirmationModalService Confirm;
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject USMovesService Moves


@if (IsSheetReady)
{
	<div class="PbtASystemContainer">
		<div class="Darker mb-2" style="background: black;">
			<div class="d-flex StatsArea">
				<div class="d-flex flex-column flex-grow-1">
					<StatViewer Attr="USAttributes.Blood" />
					<StatViewer Attr="USAttributes.Mortality" />
				</div>
				<div class="d-flex flex-column flex-grow-1">
					<StatViewer Attr="USAttributes.Heart" />
					<StatViewer Attr="USAttributes.Night" />
					</div>
				<div class="d-flex flex-column flex-grow-1">
					<StatViewer Attr="USAttributes.Mind" />
					<StatViewer Attr="USAttributes.Power" />
					</div>
				<div class="d-flex flex-column flex-grow-1">
					<StatViewer Attr="USAttributes.Soul" />				
					<StatViewer Attr="USAttributes.Veil" />
				</div>
			</div>
			<div class="d-flex CorruptionArea Darker">
				<div style="opacity: 0.25;">CORRUPCIÓN</div>
				<div><img src="imgs/Icons/Skull_@(Data.CurrentPlayerSheet.Corruption >= 1?"YES":"NO").png" @onclick=@(_ => CorruptionClicked(1)) /></div>
				<div><img src="imgs/Icons/Skull_@(Data.CurrentPlayerSheet.Corruption >= 2?"YES":"NO").png" @onclick=@(_ => CorruptionClicked(2)) /></div>
				<div><img src="imgs/Icons/Skull_@(Data.CurrentPlayerSheet.Corruption >= 3?"YES":"NO").png" @onclick=@(_ => CorruptionClicked(3)) /></div>
				<div><img src="imgs/Icons/Skull_@(Data.CurrentPlayerSheet.Corruption >= 4?"YES":"NO").png" @onclick=@(_ => CorruptionClicked(4)) /></div>
				<div><img src="imgs/Icons/Skull_@(Data.CurrentPlayerSheet.Corruption >= 5?"YES":"NO").png" @onclick=@(_ => CorruptionClicked(5)) /></div>
			</div>
			<div class="d-flex align-items-center justify-content-center DamageArea Darker">
				<div class="ArmorContainer" @onclick=ShowArmorEditor>
					<div>@Data.CurrentPlayerSheet.Armor</div>
				</div>
				<div style ="opacity: 0.25;"> DAÑO</div>
				<div class="WoundsContainer Soft">
					<div class="Wound SoftInner @(Data.CurrentPlayerSheet.Damage > 0?"WoundMark":"")" @onclick=@(_ => WoundClicked(1))></div>
				</div>
				<div class="WoundsContainer Mid">
					<div class="Wound MidInner @(Data.CurrentPlayerSheet.Damage > 1?"WoundMark":"")" @onclick=@(_ => WoundClicked(2))></div>
					<div class="Wound MidInner @(Data.CurrentPlayerSheet.Damage > 2?"WoundMark":"")" @onclick=@(_ => WoundClicked(3))></div>
				</div>
				<div class="WoundsContainer Hard">
					<div class="Wound HardInner @(Data.CurrentPlayerSheet.Damage > 3?"WoundMark":"")" @onclick=@(_ => WoundClicked(4))></div>
					<div class="Wound HardInner @(Data.CurrentPlayerSheet.Damage > 4?"WoundMark":"")" @onclick=@(_ => WoundClicked(5))></div>
				</div>
				<div class="KnifeButton">
					<img src="imgs/Icons/Knife.png" @onclick=ShowScarEditor/>
				</div>
			</div>
		</div>
		<div class="ExtraActions d-flex flex-column align-items-center">
			<button class="btn btn-outline-light align-items-center" @onclick=Roll2d6>2d6</button>
			@if (Data.CurrentPlayerSheet.ArchetypeUniqueTittle1 != "")
			{
				<button class="btn btn-outline-light align-items-center" @onclick=ShowUnique1>@Data.CurrentPlayerSheet.ArchetypeUniqueTittle1</button>
			}
			@if (Data.CurrentPlayerSheet.ArchetypeUniqueTittle2 != "")
			{
				<button class="btn btn-outline-light align-items-center" @onclick=ShowUnique2>@Data.CurrentPlayerSheet.ArchetypeUniqueTittle2</button>
			}

			<button class="btn btn-outline-light align-items-center" @onclick=ShowCircleAdvances>Mejoras por Círculos</button>
			<button class="btn btn-outline-light align-items-center" @onclick=ShowCorruptionAdvances>Mejoras por Corrupción</button>
			<button class="btn btn-outline-light align-items-center" @onclick=ShowInitialQuestions>Cuestiones iniciales</button>
		</div>
	</div>

	<!-- Armor editor -->
	<div class="FullScreenModal d-flex flex-column justify-content-center @(IsShowingArmor?"":"HideModal")" @onclick=HideArmorEditor>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="height: 300px; width:260px; background:#1C1E20;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start h-100">
				<div class="pt-3" style="font-size:16px; font-weight:bold;">Armadura</div>
				<div class="flex-grow-1 d-flex flex-column justify-content-center">
					<div class="d-flex justify-content-center align-items-center gap-2">
						<img src="imgs/Icons/Down.svg" @onclick=ArmorMinus />
						<div style="font-size: 30px; font-weight:bold;">@Data.CurrentPlayerSheet.Armor</div>
						<img src="imgs/Icons/Up.svg" @onclick=ArmorPlus />
					</div>
				</div>
			</div>
		</div>
	</div>
	
	<!-- Scars editor -->
	<div class="FullScreenModal d-flex flex-column justify-content-center @(IsShowingScars?"":"HideModal")" @onclick=HideScarEditor>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="width:260px; background:#1C1E20;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start w-100 h-100">
				<div class="pt-3" style="font-size:16px; font-weight:bold;">Cicatrices</div>
				<div class="flex-grow-1 d-flex flex-column w-100">
					<button class="btn @(Data.CurrentPlayerSheet.IsBloodScarUsed?"btn-outline-light":"btn-light") align-items-center" @onclick=@(async () => {await ToggleScar(USAttributes.Blood);})>
						@(Data.CurrentPlayerSheet.IsBloodScarUsed ? "Quitar " : "+ ")Rebentado<br />(@(Data.CurrentPlayerSheet.IsBloodScarUsed ? "+" : "-")1 sangre)
					</button>
					<button class="btn @(Data.CurrentPlayerSheet.IsHeartScarUsed?"btn-outline-light":"btn-light") align-items-center" @onclick=@(async _ => { await ToggleScar(USAttributes.Heart);})>
						@(Data.CurrentPlayerSheet.IsHeartScarUsed ? "Quitar " : "+ ")Compungido<br />(@(Data.CurrentPlayerSheet.IsHeartScarUsed ? "+" : "-")1 corazón)
					</button>
					<button class="btn @(Data.CurrentPlayerSheet.IsMindScarUsed?"btn-outline-light":"btn-light") align-items-center" @onclick=@(async _ => { await ToggleScar(USAttributes.Mind);})>
						@(Data.CurrentPlayerSheet.IsMindScarUsed ? "Quitar " : "+ ")Quebrado<br />(@(Data.CurrentPlayerSheet.IsMindScarUsed ? "+" : "-")1 mente)
					</button>
					<button class="btn @(Data.CurrentPlayerSheet.IsSoulScarUsed?"btn-outline-light":"btn-light") align-items-center" @onclick=@(async _ => { await ToggleScar(USAttributes.Soul);})>
						@(Data.CurrentPlayerSheet.IsSoulScarUsed ? "Quitar " : "+ ")Roto<br />(@(Data.CurrentPlayerSheet.IsSoulScarUsed ? "+" : "-")1 espíritu)
					</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Circle Upgrades Modal -->
	<div class="FullScreenModal d-flex flex-column justify-content-center @(IsShowingAdvances?"":"HideModal")" @onclick=HideCircleAdvances>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="width:90%; background:#1C1E20;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start w-100 h-100">
				<div class="flex-grow-1 d-flex flex-column w-100 gap-2">
					<div class="pt-3" style="font-size:16px; font-weight:bold; margin-left:-10px;">
						Avances normales
					</div>
					@foreach(var advance in Data.CurrentPlayerSheet.AdvancesNormal)
					{
						<div @onclick=@(async _ => {await ToggleAdvance(advance, KindsOfAdvance.Normal);})>
							<AdvanceViewer Advance=advance />
						</div>
					}
				</div>
				<div class="flex-grow-1 d-flex flex-column w-100 gap-2">
					<div class="pt-3 d-flex flex-column" style="font-size:16px; font-weight:bold; margin-left:-10px;">
						<div>Avances extra</div>
						<div style="font-weight: normal; font-size: 14px; margin-top: -7px; margin-bottom: 3px;">
							(después de 5 normales)
						</div>
					</div>
					@foreach (var advance in Data.CurrentPlayerSheet.AdvancesExtra)
					{
						<div @onclick=@(async _ => {await ToggleAdvance(advance, KindsOfAdvance.Extra);})>
							<AdvanceViewer Advance=advance />
						</div>
					}
				</div>
			</div>
		</div>
	</div>

	<!-- Corruption Upgrades Modal -->
	<div class="FullScreenModal d-flex flex-column justify-content-center @(IsShowingCorruptionAdvances?"":"HideModal")" @onclick=HideCorruptionAdvances>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="width: 80%; background: #1C1E20; padding: 15px;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start mb-3 w-100 h-100">
				<div class="py-3 pb-4" style="font-size:16px; font-weight:bold;">Avances de corrupción</div>
				<div class="flex-grow-1 d-flex flex-column w-100 gap-4">
					@foreach (var advance in Data.CurrentPlayerSheet.AdvancesCorruptions)
					{
						<AdvanceViewer Advance=advance />
					}
				</div>
			</div>
		</div>
	</div>

	<!-- Modal Unique1	-->
	<div class="FullScreenModal d-flex flex-column justify-content-start h-100 @(IsShowingUnique1?"":"HideModal")" @onclick=HideUnique1>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="width:90%; background:#1C1E20; padding:0; max-height:100%; margin: auto;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start w-100 h-100">
				<div class="flex-grow-1 d-flex flex-column w-100">
					@if(IsEditingUnique1 == false)
					{
						<div class="ps-4 pb-4">
							<div class="d-flex justify-content-between align-items-center p-2 ps-3" style="font-size:16px; font-weight:bold; margin-left:-10px;">
								@Data.CurrentPlayerSheet.ArchetypeUniqueTittle1
								<img src="imgs/Icons/Edit.svg" style="cursor: pointer;" @onclick=EditUnique1 />
							</div>
							<div>
								<DecodedString Value=@Data.CurrentPlayerSheet.ArchetypeUniqueBody1 />
							</div>
						</div>
					}
					else
					{
						<div class="d-flex justify-content-between align-items-center p-2 ps-3" style="font-size:16px; font-weight:bold; margin-left:-10px;">
							@Data.CurrentPlayerSheet.ArchetypeUniqueTittle1
							<img src="imgs/Icons/Save.svg" style="cursor: pointer;" @onclick=ConfirmEditUnique1 />
						</div>
						<div>
							<EditForm Model="Data.CurrentPlayerSheet">
								<InputTextArea style="width:100%; min-height:400px;" @bind-Value=Data.CurrentPlayerSheet.ArchetypeUniqueBody1 />
							</EditForm>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
	<!-- Modal Unique2	-->
	<div class="FullScreenModal d-flex flex-column justify-content-start h-100 @(IsShowingUnique2?"":"HideModal")" @onclick=HideUnique2>
		<div class="CloseButton"></div>
		<div class="ModalBody Darker" style="width:90%; background:#1C1E20; padding:0; max-height:100%; margin: auto;" @onclick:stopPropagation=true>
			<div class="d-flex flex-column align-items-center justify-content-start w-100 h-100">
				<div class="flex-grow-1 d-flex flex-column w-100">
					@if (IsEditingUnique2 == false)
					{
						<div class="ps-4 pb-4">
							<div class="pt-3 mt-2 d-flex justify-content-start mb-2" style="font-size:16px; font-weight:bold; margin-left:-10px;">
								@Data.CurrentPlayerSheet.ArchetypeUniqueTittle2
								<img src="imgs/Icons/Edit.svg" style="cursor: pointer;" @onclick=EditUnique2 />
							</div>
							<div>
								<DecodedString Value=@Data.CurrentPlayerSheet.ArchetypeUniqueBody2 />
							</div>
						</div>
					}
					else
					{
						<div class="d-flex justify-content-between align-items-center p-2 ps-3" style="font-size:16px; font-weight:bold; margin-left:-10px;">
							@Data.CurrentPlayerSheet.ArchetypeUniqueTittle2
							<img src="imgs/Icons/Save.svg" style="cursor: pointer;" @onclick=ConfirmEditUnique2 />
						</div>
						<div>
							<EditForm Model="Data.CurrentPlayerSheet">
								<InputTextArea style="width:100%; min-height:400px;" @bind-Value=Data.CurrentPlayerSheet.ArchetypeUniqueBody2 />
							</EditForm>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}
else
{
	if (ErrorMessage == "")
	{
		<div>Cargando ficha de jugador ...</div>
	}
	else
	{
		<div>Problemas cargando la ficha de jugador ..</div>
	}

}


@code {
	string NoSheetButtonText = "";
	string ErrorMessage = "";


	private bool IsSheetReady => Data.CurrentPlayerSheet is not null && Data.CurrentPlayerSheet.ID.ToString() != new Guid().ToString();

	private void ShowInitialQuestions() { }

	private async Task CorruptionClicked(int n)
	{
		if (n > Data.CurrentPlayerSheet.Corruption) Data.CurrentPlayerSheet.Corruption++;
		else Data.CurrentPlayerSheet.Corruption--;

		await Data.StoreCharacterSheet();
	}

	private async Task WoundClicked(int n)
	{
		if (n > Data.CurrentPlayerSheet.Damage) Data.CurrentPlayerSheet.Damage++;
		else Data.CurrentPlayerSheet.Damage--;

		await Data.StoreCharacterSheet();
	}


	

	private bool IsShowingArmor = false;
	private bool IsShowingScars = false;
	private bool IsShowingAdvances = false;
	private bool IsShowingUnique1 = false;
	private bool IsShowingUnique2 = false;
	private bool IsShowingCorruptionAdvances = false;


	void ShowArmorEditor() => IsShowingArmor = true;
	void HideArmorEditor() => IsShowingArmor = false;

	void ShowScarEditor() => IsShowingScars = true;
	void HideScarEditor() => IsShowingScars = false;

	void ShowCircleAdvances() => IsShowingAdvances = true;
	void HideCircleAdvances() => IsShowingAdvances = false;

	void ShowCorruptionAdvances() => IsShowingCorruptionAdvances = true;
	void HideCorruptionAdvances() => IsShowingCorruptionAdvances = false;

	void ShowUnique1() => IsShowingUnique1 = true;
	void HideUnique1() { IsShowingUnique1 = false; IsEditingUnique1 = false; }

	void ShowUnique2() => IsShowingUnique2 = true;
	void HideUnique2() { IsShowingUnique2 = false; IsEditingUnique2 = false; }

	bool IsEditingUnique1 = false;
	void EditUnique1() => IsEditingUnique1 = true;
	async Task ConfirmEditUnique1()
	{
		IsEditingUnique1 = false;
		await Data.StoreCharacterSheet();
		IsShowingUnique1 = false;
	}

	bool IsEditingUnique2 = false;
	void EditUnique2() => IsEditingUnique2 = true;
	async Task ConfirmEditUnique2()
	{
		IsEditingUnique2 = false;
		await Data.StoreCharacterSheet();
		IsShowingUnique2 = false;
	}

	async Task ToggleScar(USAttributes attribute)
	{
		var now = Data.CurrentPlayerSheet.GetScar(attribute);
		Data.CurrentPlayerSheet.SetScar(attribute, !now);

		await Data.StoreCharacterSheet();
		HideScarEditor();
		Toaster.ShowInfo("Se ha marcado la cicatriz, se ha bajado el atributo y se han limpiado las heridas");
	}


	async Task ArmorPlus()
	{
		Data.CurrentPlayerSheet.Armor++;
		await Data.StoreCharacterSheet();
	}
	async Task ArmorMinus()
	{
		Data.CurrentPlayerSheet.Armor--;
		await Data.StoreCharacterSheet();
	}

	async Task ToggleAdvance(Advance adv, KindsOfAdvance kind)
	{

		if (kind == KindsOfAdvance.Normal)
		{
			adv.IsUsed = !adv.IsUsed;
			Data.CurrentPlayerSheet.AdvancesNormalBools[adv.ID] = adv.IsUsed;
		}
		else if (kind == KindsOfAdvance.Extra)
		{
			int count = Data.CurrentPlayerSheet.AdvancesNormalBools.Count(x => x == true);
			if (count < 5)
				Toaster.ShowError("No puedes marcar un avance extra hasta que hayas hecho al menos 5 avances norales");
			else
			{
				adv.IsUsed = !adv.IsUsed;
				Data.CurrentPlayerSheet.AdvancesExtraBools[adv.ID] = adv.IsUsed;
			}
		}
		else if (kind == KindsOfAdvance.Corruption)
		{
			adv.IsUsed = !adv.IsUsed;
			Data.CurrentPlayerSheet.AdvancesCorruptionBools[adv.ID] = adv.IsUsed;
		}

		await Data.StoreCharacterSheet();
	}


	Random rnd = new();

	async Task Roll2d6()
	{
		int d1 = 1 + rnd.Next(5);
		int d2 = 1 + rnd.Next(5);
		int bonus = 0;
		string rollText = "";

		int total = d1 + d2 + bonus;

		await Msgs.SendMessage(new RollMessage
			{
				RollValue = total,
				MoveID = USMoveIDs.raw2d6,
				Message = $"{d1} + {d2}"
			});
	}
}
