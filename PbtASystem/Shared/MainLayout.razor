@using Blazored.Toast
@using PbtASystem.Pages
@inherits LayoutComponentBase
@implements IDisposable


<BlazoredToasts />
<CharacterSelector/>
<ConfirmationModal/>

@if(WaitingForConnection)
{
	<div class="w-100 d-flex h-100 justify-content-center align-items-center" style="min-height: 200px;">
		@debug
		@if(IsLoadingFromDatabase)
		{
			<div>Negociando con la base de datos ...</div>
		}
		else
		{
			<div>Comprovando credenciales ...</div>
		}
		
	</div>
}
else if (IsLoadingFromDatabase)
{
	<div class="w-100 d-flex h-100 justify-content-center align-items-center" style="min-height: 200px;">
		Negociando con la base de datos ...
	</div>
}
else
{
	<div class="page d-flex flex-column w-100 PbtASystemContainer Black">
		@if (Auth.IsUserConnected)
		{
			<div class="w-100 d-flex Darker TopMenu gap-1">
				<div class="d-flex flex-grow-1 gap-1">
					@if(Auth.IsMaster)
					{
						<div class="TopMenuButton @(CurrentlyViewing == Views.Master?"TopMenuButtonActive":"")" @onclick=@(_=>{ChangeViewTo(Views.Master);})>Master</div>
					}
					else
					{
						<div class="TopMenuButton @(CurrentlyViewing == Views.Sheet?"TopMenuButtonActive":"")" @onclick=@(_=>{ChangeViewTo(Views.Sheet);}) >@Ficha</div>
						<div class="TopMenuButton @(CurrentlyViewing == Views.Moves?"TopMenuButtonActive":"")" @onclick=@(_=>{ChangeViewTo(Views.Moves);})>Movs</div>
					}					
					<div class="TopMenuButton @(CurrentlyViewing == Views.Campaign?"TopMenuButtonActive":"")" @onclick=@(_=>{ChangeViewTo(Views.Campaign);})>Campaña</div>
					<div class="TopMenuButton @(CurrentlyViewing == Views.FactionPhase?"TopMenuButtonActive":"")" @onclick=@(_=>{ChangeViewTo(Views.FactionPhase);})>T.Facción</div>
				</div>
				<div class="TopMenuButton @(CurrentlyViewing == Views.Settings?"TopMenuButtonActive":"")"
					style="max-width: 40px;"
					@onclick=@(_=>{ChangeViewTo(Views.Settings);})>
					<img style="@(CurrentlyViewing == Views.Settings?"filter: invert(1);":"") opacity: 0.5;" width="25" src="imgs/Icons/Settings.svg" />
				</div>
			</div>
		}
		else
		{
			<div class="NoUserError">
				USUARIO NO CONECTADO
			</div>
		}
		@if(CurrentlyViewing == Views.Sheet)
		{
			<Playing />
		}
		else if(CurrentlyViewing == Views.Settings)
		{
			<Meta ForceUpdate="ForceUpdate"/>
		}
		else if(CurrentlyViewing == Views.Moves)
		{
			<PlayingMoves GoToCampaign="GoToCampaign"/>
		}
		else if(CurrentlyViewing == Views.Campaign)
		{
			<CharacterViewer/>
		}
		else if(CurrentlyViewing == Views.Master)
		{
			<Master />
		}
	</div>
}


@code{
	enum Views {Sheet, Moves, Campaign, FactionPhase, Settings, Master, Clocks};
	Views CurrentlyViewing = Views.Settings;

	IJSObjectReference FirebaseJSRef;
	[Inject] IJSRuntime JS { get; set; }
	[Inject] FirebaseData Data { get; set; }
	[Inject] FirebaseAuth Auth { get; set; }
	[Inject] FirebaseMessaging Messaging { get; set; }
	[Inject] IToastService Toaster { get; set; }
	[Inject] Blazored.LocalStorage.ILocalStorageService LocaStorageManager { get; set; }
	[Inject] CharacterSelectionService CharacterSelector { get; set; }
	[Inject] NavigationManager NavigationManager { get; set; }

	private bool WaitingForConnection = true;

	private void GoToCampaign()
	{
		CurrentlyViewing = Views.Campaign;
	}

	private bool IsLoadingFromDatabase = false;


	private string debug = "";

	private string Ficha
	{
		get
		{
			if (Data.CurrentCharacter is not null) return Data.CurrentCharacter.Name;
			else return "Ficha";
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (MainLayout.Reference == null)
				MainLayout.Reference = this;

			Data.ShowLoadingCover += (o,e) => { 
				IsLoadingFromDatabase = true;
				StateHasChanged();
			};
			Data.HideLoadingCover += (o,e) => { 
				IsLoadingFromDatabase = false;
				StateHasChanged();
			};


			Auth.UserChanged += async (o, name) =>
			{
				WaitingForConnection = false;
				if (name == "No user connected")
				{

				}
				else
				{
					debug += "Loading all - ";
					StateHasChanged();
					if (Data != null && Data.AllCharacters != null && Data.AllCharacters.Count == 0)
						await Data.LoadAllAsync();

					debug += "Loaded -  Storing chronicle";
					StateHasChanged();
					Chronicle test = new Chronicle { Name = "test" };
					await Data.StoreChronicle(test);

					debug += "Storing chronicle - ";
					StateHasChanged();

					if (Data != null && Data.Chronicle.Name == "")
						await Data.GetChronicle(new Guid("6210b905-e706-477a-bfc9-8d6528fe6e19"));

					if((await Data.IsDefaultCharacterIDSet()) == false)
					{
						await AllowPlayerToChooseCharacter();
					}
					await Messaging.CheckIfReConnnectionNeeded();
					MainLayout.ForceUpdate();
				}

				StateHasChanged();
			};
		}
	}

	public static MainLayout? Reference;
	public static void ForceUpdate(){
		MainLayout.Reference?.StateHasChanged();
	}

	private async Task AllowPlayerToChooseCharacter()
	{
		await Auth.AllowPlayerToChooseCharacter();

		StateHasChanged();
	}

	private bool AlreadySetUp = false;

	protected async override Task OnParametersSetAsync()
	{
		await Connectors.SetConnectors(JS, Data, Auth);

		#if DEBUG
		URLSupport.IsRelease = false;
		#else
		URLSupport.IsRelease = true;
		#endif
	}

	private void ChangeViewTo(Views newView)
	{
		CurrentlyViewing = newView;
	}


	public void Dispose()
	{
		Auth.Dispose();
		Data.Dispose();
	}
}

