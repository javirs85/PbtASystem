@inject FirebaseAuth Auth
@inject FirebaseData Data
@inject NavigationManager Navigation
@inject IToastService Toaster

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">@Top</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <a class="nav-link @GetActive("Meta")" 
                   data-bs-toggle="collapse" 
                    data-bs-target="#navbarNavAltMarkup" 
                    aria-current="page"
                    style="cursor:pointer"
                   @onclick=@(()=>{Navigation.NavigateTo("Meta");})
                    >
                    Meta
                </a>
                <a class="nav-link  @GetActive("Playing")"
                     data-bs-toggle="collapse"
                     data-bs-target="#navbarNavAltMarkup"
                     aria-current="page"
                     style="cursor:pointer"
                @onclick=GoToPlay>
                    Jugar
                </a>
                <a class="nav-link  @GetActive("Select")"
                     data-bs-toggle="collapse"
                     data-bs-target="#navbarNavAltMarkup"
                     aria-current="page"
                     style="cursor:pointer"
                @onclick=GoToCampaign>
                    Campaña
                </a>
            </div>
        </div>
    </div>
</nav>

@code{

    private string Top
    {
        get
        {
            if (IsActive("Playing")) return Data.CurrentCharacter.Name;
            else
            {
                if (IsActive("Select")) return "Campaña";
                else return "PbtASystem";
            }
        }
    }
    protected override void OnInitialized() => Navigation.LocationChanged += (s, e) => StateHasChanged();

    private void GoToCampaign()
    {
        if(Data.PlayerCharacter.Circle != Circles.NotSet)
        {
            Navigation.NavigateTo($"Character/" + Data.PlayerCharacter.ID.ToString());
        }
        else
            Navigation.NavigateTo($"Select");
    }

    private void GoToPlay()
    {
        if (Auth.ConnectedUserName is null || Auth.ConnectedUserName == "" || Auth.ConnectedUserName == "No user connected")
            Toaster.ShowError("Es necesario hacer login para jugar");
        else if (Data.PlayerCharacter is null || Data.PlayerCharacter.ID == new Guid())
            Toaster.ShowError("Es necesario tener un personaje asignado");
        else
        {
            Data.CurrentCharacter = Data.PlayerCharacter;
            Navigation.NavigateTo($"Playing/{Data.PlayerCharacter.ID}");
        }
    }

    void Back()
    {
        
    }

    bool IsActive(string href)
    {

        var relativePath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLower();
        if(href == "Select")
        {
            return relativePath.StartsWith("select".ToLower()) ||
                    relativePath.StartsWith("campaña".ToLower()) ||
                    relativePath.StartsWith("character".ToLower());
        }
        return relativePath.StartsWith(href.ToLower());
    }

    string GetActive(string href) => IsActive(href) ? "active" : "";
}